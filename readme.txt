В Django веб-сервером является сервер WSGI (Web Server Gateway Interface), который обеспечивает связь между сервером и веб-приложением. WSGI является стандартом Python и обеспечивает множество возможностей для создания веб-приложений на Python.

В Django также есть встроенный сервер разработки, который позволяет легко разрабатывать и тестировать веб-приложения на локальном компьютере. Этот сервер автоматически перезапускает приложение при внесении изменений в код, что делает процесс разработки более эффективным.


---- Этот проект ----

Проект будет REST API сайта для бронирования номеров отелей.


- Регистрация с помощью email и password

POST /register
email password --- acces_token

- аутентификация - сверка пользователя и пароля. Будем использовать токен

POST /login
email pasword --- acces_token

- просмотр доступных отелей

GET /hotels
None --- id address

- Просмотр в отеле свободных номеров

POST /hotels/<hotel_id>/rooms
from to (даты заезда) --- id num (число комнат)

- бронирование выбранного метоад

POST /bookings
hotel_id room_id from to --- id (результат id нового объекта Booking)

- Посмотреть список забронироанных номеров

GET /bookings
None - id (список id Booking)

- отмена или подтверждение бронирования

DELETE /bookings/<booking_id>

<booking_id> --- id (информация об удалённом объекте)

---- Структура Django-проекта ----

Структура Django-проекта включает в себя несколько директорий и файлов. Наиболее важные из них:

manage.py - файл, позволяющий управлять проектом через командную строку.
myproject/__init__.py - пустой файл, который указывает, что каталог myproject является пакетом Python.
myproject/settings.py - файл, содержащий настройки проекта, такие как база данных, директории, используемые шаблоны и другие параметры.
myproject/urls.py - файл, содержащий список URL-адресов.


---- Создание проекта ----

booking - это имя нового проекта:
django-admin startproject booking


После этого будет создана структура проекта, включающая в себя несколько файлов и директорий,
в том числе файл manage.py, который позволяет управлять проектом через командную строку.


Установка Django REST framework
pip install djangorestframework
Всё содержимое новой папки booking переместим на один уровень вложенности вверх


Добавляем 'rest_framework' в INSTALLED_APPS в файле settings.py.

Чтобы создать приложение с названием api, нужно ввести команду
python manage.py startapp api

Добавляем 'api' в INSTALLED_APPS в файле settings.py.


-создаём модели в файле models.py
Модель пользователя будет использоваться для аутентификации, её нужно указать в настройках

-Производим миграцию:
python manage.py makemigrations
миграция создаёт БД и создаёт файл миграций в api
-выполним операции миграции
python manage.py migrate
происходят миграции всех приложений из INSTALLED_APPS
появляется файл БД


-создаём сериализаторы для моделей
Сериализатор позволяет препобразовать объекты языка python в JSON и обратно
создаём файл serializers, наследуется от базового класса serializers


-создаём View (представления)
представления это классы или функции, которые обрабатывают запросы пользователей
в Django это встроенные классы, у них есть возможность создания интерфейса и URL-шаблонов

-тестируем

-добавляем аутентификацию:
добавляем в urls проекта:
    path('api-auth/', include('rest_framework.urls')),
    path('api-token-auth/', views.obtain_auth_token),

api-auth/ аутентификация по логину и паролю
api-token-auth/ аутентификация по токену

настраиваем схему аутентификации. Подробно в документации
https://www.django-rest-framework.org/api-guide/authentication/
изменяем settings.py указывая какие глобально классы аутентификации используем.
Они применяются по очереди: REST_FRAMEWORK = {...}

после этого в API появляется возможность аутентифицироваться

теперь добавляем несколько классов permission которые будут следить за авторизацией
в той же переменной REST_FRAMEWORK добавляем классы разрешений как в документации
IsAuthenticated - можно смотреть API только при аутентификации


Для каждого View можно по отдельности настроить классы авторизации, или совсем их убрать, например:
authentication_classes = []
permissions_classes = []

аутентификацию через токен можно проверить по эндпоинту:

тут нужен сторонний клиент, например postman или curl
TODO исправить ошибку при попытке поулчить токен:
curl -l http://127.0.0.1:8000/api-token-auth/ -XPOST --json "{\"username\": \"roman\", \"password\": \"qwerty123\"}"

---- Запсук сервера----


Для запуска сервера Django необходимо выполнить команду
python manage.py runserver
Это запустит локальный сервер на порту по умолчанию (обычно 8000)

Если хотите запустить сервер на другом порту, вы можете указать его после команды runserver, например,
python manage.py runserver 8080.

далее по адресу
http://127.0.0.1:8000/
мы увидим все доступные методы





























