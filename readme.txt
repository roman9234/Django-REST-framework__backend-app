

Django – фреймворк для веб-разработки на Python. Он предоставляет разработчикам инструменты для создания высокоуровневых веб-приложений быстро и эффективно. В основе Django лежит паттерн проектирования Model-View-Controller (MVC), где модели (Model) представляют данные, представления (View) отображают данные пользователю, а контроллеры (Controller) обрабатывают запросы и обновляют данные.


ORM Django позволяет взаимодействовать с базами данных, используя объектно-ориентированный подход. Django ORM позволяет создавать, читать, обновлять и удалять данные из базы данных, не используя SQL-запросы. Он также обеспечивает автоматическую генерацию SQL-запросов для создания и обновления таблиц в базе данных.


Шаблонизатор Django позволяет создавать динамические HTML-страницы, используя шаблоны и контекстные данные.
Шаблоны Django – файлы, содержащие HTML-код и специальные теги, которые позволяют вставлять данные из контекста в HTML-код. Шаблонизатор Django позволяет создавать наследуемые шаблоны, которые могут использоваться в разных частях приложения.


Роутинг в Django — процесс определения, какой обработчик должен быть вызван для конкретного URL-адреса.


Статические файлы в Django — файлы, которые используются в веб-приложении, но не изменяются в зависимости от запроса пользователя.


В Django веб-сервером является сервер WSGI (Web Server Gateway Interface), который обеспечивает связь между сервером и веб-приложением. WSGI является стандартом Python и обеспечивает множество возможностей для создания веб-приложений на Python.

В Django также есть встроенный сервер разработки, который позволяет легко разрабатывать и тестировать веб-приложения на локальном компьютере. Этот сервер автоматически перезапускает приложение при внесении изменений в код, что делает процесс разработки более эффективным.

---- Структура Django-проекта ----

Структура Django-проекта включает в себя несколько директорий и файлов. Наиболее важные из них:

manage.py - файл, позволяющий управлять проектом через командную строку.
myproject/__init__.py - пустой файл, который указывает, что каталог myproject является пакетом Python.
myproject/settings.py - файл, содержащий настройки проекта, такие как база данных, директории, используемые шаблоны и другие параметры.
myproject/urls.py - файл, содержащий список URL-адресов.


---- Создание проекта ----
pip install Django


myproject - это имя нового проекта:
django-admin startproject myproject


После этого будет создана структура проекта, включающая в себя несколько файлов и директорий,
в том числе файл manage.py, который позволяет управлять проектом через командную строку.


Установка Django REST framework
pip install djangorestframework


Затем добавьте 'rest_framework' в INSTALLED_APPS в файле settings.py.


---- Создание сериализаторов для модели ----

Сериализаторы - это классы, которые преобразуют модели Django в формат, понятный для передачи через API. Создадим простой сериализатор для модели Post.


---- Запсук сервера----


Для запуска сервера Django необходимо выполнить команду
python manage.py runserver
Это запустит локальный сервер на порту по умолчанию (обычно 8000)

Если хотите запустить сервер на другом порту, вы можете указать его после команды runserver, например,
python manage.py runserver 8080.































